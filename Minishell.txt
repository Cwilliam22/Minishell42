Minishell :

2 parts :
    -> parsing 
    -> execution

decouper la chaine d'arguments en morceaux appeles Token
execve()
chaque token represente un element de la commande

Exemple : (CMD) [ls -l > fichier.txt]
    -> 4 token de different type

Exemple : (CMD) [cat|ls]
    -> Une chaîne de caractères (str = "cat", "|", "ls")
    -> Un type (int = 6, 5, 6)

Les Règles des Tokens

Il y a des règles pour donner le bon type à chaque token :

1️. Les redirections (<, >, <<, >>) :

    < → INPUT 
    > → TRUNC
    << → HEREDOC
    >> → APPEND

2️. Le premier mot de la commande est toujours une commande :

    Exemple : ls -l → ls est une CMD, -l est un ARG.

3️. Tout ce qui vient après une commande ou une redirection est un argument :

    Exemple : echo hello → hello est un ARG après echo (CMD).

4️. Le symbole | (pipe) est toujours un PIPE.

5️. Après un PIPE (|), le mot suivant est forcément une commande ou une redirection.


Obliger de stocker les tokens dans une liste chaine ?
Est ce qu'avec une stack c'est OK ?