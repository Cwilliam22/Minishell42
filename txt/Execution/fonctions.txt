FONCTIONS : 

#/////////////////////////////////////////////////////////////////////////////#
#		1. Gestion de l’entrée/sortie standard et mémoire                     #
#/////////////////////////////////////////////////////////////////////////////#

    - printf(const char *format, ...)
    - write(int fd, const void *buf, size_t count)
    - malloc(size_t size)
    - free(void *ptr)

#/////////////////////////////////////////////////////////////////////////////#
#		2. Gestion des fichiers et des répertoires                            #
#/////////////////////////////////////////////////////////////////////////////#

    (Fichiers)
        - access(const char *pathname, int mode)
            -> Vérifie si un fichier existe et si l'utilisateur a les permissions demandées pour y accéder.
            -> const char *pathname : Chemin du fichier à tester.
            -> int mode : Type d'accès à vérifier. Il peut prendre les valeurs suivantes :
                    - F_OK : Vérifie si le fichier existe (0 en int).
                    - R_OK : Vérifie si le fichier est lisible (4 en int).
                    - W_OK : Vérifie si le fichier est modifiable (2 en int).
                    - X_OK : Vérifie si le fichier est exécutable (1 en int).
                    -> F_OK, R_OK, etc sont ici des macros qui sont utilisées pour représenter des valeurs spécifiques (en int).
                    -> Ici l'int est important car il va nous permettre de combiner plusieurs permissions avec l'opérateur OU bit à bit (|).
                        -> Exemple : access("fichier.txt", R_OK | W_OK);
            -> Return (0) si l'accès est autorisé.
            -> Return (-1) en cas d'erreur (fichier inexistant ou accès refusé).

        - open(const char *pathname, int flags, mode_t mode)
            -> Utilisée pour ouvrir un fichier et renvoie un descripteur de fichier qui pourra être utilisé pour lire, écrire ou modifier le fichier.
            -> const char *pathname : Chemin du fichier à ouvrir.
            -> int flags : Mode d'ouverture du fichier (ex: O_RDONLY, O_WRONLY).
                -> Mode d'ouverture : 
                    - O_RDONLY (0) : Ouvre le fichier en lecture seule.
                    - O_WRONLY (1) : Ouvre le fichier en écriture seule.
                    - O_RDWR (2) : Ouvre le fichier en lecture et écriture.
            -> mode_t mode : Permissions du fichier si il est créé (ex: 0644).
                -> Cependant le nombre relatif au permissions (rwx) UNIX est compté en octal (base 8). 
                    C'est pour cette raison que nous devons rajouté un zéro devant sinon il 
                    serait interprété comme un nombre en décimale (base 10).
            -> Return (nbr >= 0) en cas de succès.
                -> Cette valeur sera le descripteur du fichier et sera stocké dans une variable locale pour être utilisé par la suite (fd).
            -> Return (-1) en cas d'erreur.

        - read(int fd, void *buf, size_t count)
            -> Permet de lire des données à partir d'un fichier et de les stocker dans un buffer.
            -> int fd : Descripteur de fichier à partir duquel lire les données.
                -> Descripteurs standards :
                    - 0 : STDIN_FILENO (entrée standard)
                    - 1 : STDOUT_FILENO (sortie standard)
                    - 2 : STDERR_FILENO (erreur standard)
            -> void *buf : Pointeur vers un buffer où les données seront stockées.
                -> Doit être alloué avant l’appel à read().
            -> size_t count : Nombre maximal d'octets à lire.
                -> La fonction peut lire moins d'octets que demandé (fin de fichier atteinte).
            -> La valeur de retour nous indique combien d’octets ont été réellement lus. 
            -> Return (nbr > 0)	indique le nombre d'octets réellement lus.
            -> Return (0) en cas de fin de fichier atteinte.
            -> Return (-1) en cas d'erreur. 

        - close(int fd)
            -> Permet de fermer un descripteur de fichier ouvert pour libérer les ressources associées.
            -> int fd : Descripteur du fichier à fermer (obtenu avec open() ou dup()).
            -> Return (0) en cas de succès (le fichier est fermé correctement).
            -> Return (-1) en cas d'erreur.

        - stat(const char *pathname, struct stat *statbuf)
            -> Permet d’obtenir des informations sur un fichier ou un répertoire.
            -> const char *pathname : Chemin du fichier ou du répertoire dont on veut obtenir les informations.
            -> struct stat *statbuf : Pointeur vers une structure stat où les informations du fichier seront stockées.
                -> La structure statbuf est rempli par la fonction stat().
            -> Return (0) en cas de succès (la structure statbuf contient les informations).
            -> Return (-1) en cas d'erreur (si le fichier n'existe pas).

        - lstat(const char *pathname, struct stat *statbuf)
            -> Permet d'obtenir des informations sur un fichier.
            -> Librairie : <sys/stat.h>
            -> const char *pathname : Chemin du fichier ou du répertoire dont on veut obtenir les informations.
            -> struct stat *statbuf : Pointeur vers une structure stat où les informations du fichier seront stockées.

        - fstat(int fd, struct stat *statbuf)
            -> Permet d’obtenir des informations sur un fichier à partir d’un descripteur de fichier (fd) plutôt qu’un chemin.
            -> int fd : Descripteur de fichier (s'obtient ave open())
            -> struct stat *statbuf : Pointeur vers une structure stat où les informations du fichier seront stockées.

        - unlink(const char *pathname)
            -> Permet de supprimer un fichier (ou un lien) du système de fichiers.
            -> Supprime le lien (entrée) dans le répertoire vers le fichier désigné par pathname.
            -> Cette fonction ne fonctionne que pour les fichiers.
            -> Pour supprimer un répertoire, on utilise rmdir().
            -> const char *pathname : Chemin du fichier ou du répertoire dont on veut obtenir les informations.
    
    (Répertoires)
        - opendir(const char *name)
            -> Permet d’ouvrir un répertoire (dossier) et de préparer sa lecture.
            -> Retourne un pointeur vers une structure DIR, qui représente le répertoire ouvert 
                (comme un descripteur de fichier pour un fichier).
            -> const char *name : 

        - readdir(DIR *dirp)
            -> Permet de lire une entrée (dossier) du répertoire ouvert avec opendir.
            -> Retourne un pointeur vers une structure dirent si une entrée est trouvée ✅
            -> Retourne NULL si :
                - Fin du répertoire atteinte (plus rien à lire)
                - Erreur
            -> DIR *dirp : Pointeur vers le répertoire ouvert, obtenu grâce à opendir.

        - closedir(DIR *dirp)
            -> Permet de fermer proprement un répertoire ouvert avec opendir.
            -> Retourne 0 en cas de succès.
            -> Retourne -1 en cas d’erreur.
            -> DIR *dirp : Pointeur vers le répertoire ouvert, obtenu grâce à opendir.

#/////////////////////////////////////////////////////////////////////////////#
#		3. Gestion des processus                                              #
#/////////////////////////////////////////////////////////////////////////////#

    - fork(void)
        ->
        -> void : 

    - wait(int *status)
        -> 
        -> int *status : 

    - waitpid(pid_t pid, int *status, int options)
        ->
        -> pid_t pid : 
        -> int *status : 
        -> int options :

    - wait3(int *status, int options, struct rusage *rusage)
        -> 
        -> int *status :
        -> int options :
        -> struct rusage *rusage : 

    - wait4(pid_t pid, int *status, int options, struct rusage *rusage)
        -> 
        -> pid_t pid : 
        -> int *status :
        -> int options : 
        -> struct rusage *rusage : 

    - execve(const char *filename, char *const argv[], char *const envp[])
        -> 
        -> const char *filename :
        -> char *const argv[] : 
        -> char *const envp[] :

    - exit(int status)
        ->
        -> int status : 

#/////////////////////////////////////////////////////////////////////////////#
#		4. Gestion des signaux (UNIX)                                         #
#/////////////////////////////////////////////////////////////////////////////#

    - signal(int signum, void (*handler)(int))
    - sigaction(int signum, const struct sigaction *act, struct sigaction *oldact)
    - sigemptyset(sigset_t *set)
    - sigaddset(sigset_t *set)
    - kill(pid_t pid, int sig)


#/////////////////////////////////////////////////////////////////////////////#
#		5. Gestion des descripteurs de fichiers                               #
#/////////////////////////////////////////////////////////////////////////////#

    - dup(int oldfd)
        -> int dup(int oldfd)
        -> int oldfd : ancien descripteur de fichier 
        -> Cette fonction crées un nouveau descripteur de fichier qui pointe 
            vers la même destination.
        -> Deux descripteurs distincts seront disponible après la fonction. 
        -> On peut modifier ou fermer l’un sans affecter directement l’autre.
        -> Les deux (oldfd et newfd) pointent vers la même ressource 
            (même fichier ou pipe, même position, même droits d'accès).
        -> Utiliseée pour :
            - Sauvegarder temporairement un descripteur avant redirection.
            - Revenir à l’état initial en restaurant le descripteur sauvegardé 
                après la commande.
        -> Autres :
            - Lire ou écrire avec newfd affecte la même chose que oldfd.
            - Si on avance dans le fichier avec un des deux, l’autre est aussi affecté.

    - dup2(int oldfd, int newfd)
        -> int dup2(int oldfd, int newfd);
        -> int oldfd : descripteur de fichier source
        -> int newfd : descripteur de fichier destination
        -> Rediriger un descripteur standard vers une autre ressource.
        -> Cette fonction duplique le descripteur oldfd dans la valeur newfd. 
        -> Si newfd est déjà ouvert, il est fermé automatiquement.
        -> Utilisée pour principalement pour faire des redirections d'entrée et de sortie.

    - pipe(int pipefd[2])
        -> int pipe(int pipefd[2]);
        -> int pipefd[2] : 
        -> Cette fonction créer un pipe anonyme.
            -> C'est quoi un pipe anonyme ???
                -> Un pipe anonyme
        -> Remplit le tableau pipefd avec deux descripteurs de fichiers :
            pipefd[0] -> extrémité de lecture du pipe
            pipefd[1] -> extrémité d’écriture du pipe
            -> Pourquoi 2 descripteurs ???
                -> Car dans un pipe unidirectionnel il y a deux extrémités, 
                    une pour écrire et une pour lire.
        -> Retourne 0 en cas de succès.
        -> Retourne -1 en cas d’erreur.

#/////////////////////////////////////////////////////////////////////////////#
#		6. Gestion de l’environnement et du terminal                          #
#/////////////////////////////////////////////////////////////////////////////#

    (Variables d’environnement)
        - getenv(const char *name)
            -> Récupère la valeur d'une variable d'environnement donnée.
            -> Retourne un pointeur vers une chaîne de caractères contenant la valeur de la variable.
            -> Retourne NULL si la variable n'existe pas.
            -> const char *name : le nom de la variable d'environnement
    
    (Gestion des répertoires de travail)
        - getcwd(char *buf, size_t size)
            -> Permet d'obtenire le chemin absolu du répertoire de travail courant.
            -> Retourne pointeur vers buf en cas de succès. 
            -> Retourne NULL sinon.
            -> char *buf : buffer où sera stocké le chemin
            -> size_t size : taille du buffer

        - chdir(const char *path)
            -> Change le répertoire de travail courant.
            -> Retourne 0 en cas de succès.
            -> Retourne -1 en cas d'erreur.
            -> const char *path : chemin du nouveau répertoire
    
    (gestion avancée des terminaux -> Termcap)
        - tgetent(char *bp, const char *name)
            -> Charge l'entrée termcap pour le terminal donné.
            -> Retourne 1 si succès.
            -> Retourne 0 si pas trouvé.
            -> Retourne -1 si erreur.
            -> char *bp : buffer de stockage
            -> const char *name : nom du terminal

        - tgetflag(const char *id)
            -> Vérifie la présence d'une capacité booléenne dans termcap.
            -> Retourne 1 si présente. 
            -> Retourne 0 sinon.
            -> const char *id : identifiant de la capacité.

        - tgetnum(const char *id)
            -> Récupère une valeur numérique (capacité) dans termcap.
            -> Retourne la valeur numérique.
            -> Retourne -1 si non trouvée.
            -> const char *id : identifiant de la capacité

        - tgetstr(const char *id, char **area)
            -> Récupère une chaîne de contrôle (string capability).
            -> Retourne un pointeur vers la chaîne, ou NULL.
            -> const char *id : identifiant
            -> char **area : adresse d'un pointeur vers un buffer de chaîne (optionnel)

        - tgoto(const char *cap, int col, int row)
            -> Formate une chaîne de positionnement du curseur.
            -> Retourne une chaîne utilisable pour positionner le curseur.
            -> const char *cap : chaîne obtenue par tgetstr
            -> int col, int row : position cible du curseur

        - tputs(const char *str, int affcnt, int (*putc)(int))
            -> Affiche une chaîne de contrôle sur le terminal.
            -> Retourne 0 si tout s'est bien passé.
            -> const char *str : chaîne à afficher.
            -> int affcnt : nombre de lignes affectées (souvent 1).
            -> int (*putc)(int) : fonction pour afficher un caractère (souvent putchar).
    
    (gestion des terminaux -> TTY)
        - isatty(int fd)
            -> Vérifie si un descripteur correspond à un terminal.
            -> Retourne 1 si oui. 
            -> Retourne 0 sinon.
            -> int fd : descripteur de fichier

        - ttyname(int fd)
            -> Récupère le nom du terminal associé à un descripteur.
            -> Retourne le nom du terminal (chaîne).
            -> Retourne NULL en cas d'erreur.
            -> int fd : descripteur de fichier

        - ttyslot(void)
            -> Donne l'indice de l'entrée dans /etc/ttys correspondant au terminal courant.
            -> Retourne le numéro de slot.
            -> Retourne 0 si non trouvé.
            -> Aucun paramètre

        - ioctl(int fd, unsigned long request, ...)
            -> Permet de contrôler ou configurer un périphérique (souvent un terminal).
            -> Retourne 0 si succès. 
            -> Retourne -1 si erreur.
            -> int fd : descripteur de fichier
            -> unsigned long request : opération à effectuer
            -> ... : paramètres supplémentaires selon l'opération
    
    (Configuration du terminal)
        - tcsetattr(int fd, int optional_actions, const struct termios *termios_p)
            -> Applique une nouvelle configuration du terminal.
            -> Retourne 0 si succès. 
            -> Retourne -1 si erreur.
            -> int fd : descripteur de terminal.
            -> int optional_actions : quand appliquer les changements (TCSANOW, TCSADRAIN, TCSAFLUSH).
            -> const struct termios *termios_p : nouvelle config.

        - tcgetattr(int fd, struct termios *termios_p)
            -> Récupère la configuration actuelle du terminal.
            -> Retourne 0 si succès.
            -> Retourne -1 si erreur.
            -> int fd : descripteur de terminal
            -> struct termios *termios_p : pointeur vers la structure à remplir

#/////////////////////////////////////////////////////////////////////////////#
#		7. Gestion des erreurs                                                #
#/////////////////////////////////////////////////////////////////////////////#

        - strerror(int errnum)
            -> Retourne une chaîne de caractères descriptive correspondant à un code d'erreur.
            -> Retourne un pointeur vers un message d'erreur standard correspondant au code errnum.
            -> int errnum : le code d'erreur (généralement errno)

        - perror(const char *s)
            -> Affiche un message d'erreur sur la sortie d'erreur standard (stderr).
            -> Retourne Rien (fonction void)
            -> const char *s : message personnalisé affiché avant la description de l'erreur

#/////////////////////////////////////////////////////////////////////////////#
#		8. Bibliothèque Readline -> Interaction avec l'utilisateur            #
#/////////////////////////////////////////////////////////////////////////////#

    - readline(const char *prompt)
    - rl_clear_history(void)
    - rl_on_new_line(void)
    - rl_replace_line(const char *text, int clear_undo)
    - rl_redisplay(void)
    - add_history(const char *line)

