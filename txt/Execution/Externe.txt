EXTERNE :

- Récupérer la commande et vérifier si elle est exécutable.
- Chercher son chemin d’accès si l’utilisateur a entré un nom sans chemin absolu.
- Créer un processus fils (fork()) pour exécuter la commande.
- Exécuter la commande avec execve().
- Gérer les erreurs et attendre la fin du processus.


Lorsqu’un utilisateur entre une commande, on doit d’abord déterminer si elle est exécutable directement.

Les processus fonctionnent comme un arbre avec des branches.
getpid() pour obtenir l'ID du process
getppid() pour obtenir l'ID du process parent

Chaque appele du process donnera un pid different, car il sagit d'un nouveau process.

CMD [ps] affiche les processus en cours d'execution sur le systeme.

Tuer un processus en cours d'execution CMD [kill] (SIGTERM == signal envoye pour terminer le process)

Deux facons de créer un process

    1. Utiliser system

    2. Utiliser fork et exec
        - fork()
            -> Produit un process fils qui est l'execte copie de son processus parent.
            -> Le process parent continue d'executer le programme a partir de l'endroit ou fork est appele.
            -> Le process enfant fait la meme chose au meme endroit 
https://mtodorovic.developpez.com/linux/programmation-avancee/?page=page_3



        - exec()
            -> Fait en sorte qu'un process cesse d'etre une instance d'un certain programme et devient une instance d'un autre.

Comment executer les CMD externes ?

Contrairement aux builtins les CMD externes seront lancees directement avec leur vrai binaire depuis le shell.
Nous avons donc une ligne de commande splitter en argument grace au parsing.
    Exemple : 
        (1) ls -l /home
        (2) tab_arg = ["ls", "-l", "/home", NULL]

Dans cette exemple l'utilisateur tape ls 

fork()
    -> Cree un nouveau processus appele processus enfant (child)
    -> Le processus original est appele processus parent
    -> #include <unistd.h>
    -> Fork() est appele 1x mais retourne 2x 
    -> Return 
        - Return (0) dans le processus fils.
        - Return le PID du fils dans le processus parent.
        - Return (-1) en cas d'erreur (échec de création du processus).

